# 项目状态综合检查
name: System Status Check

on:
  schedule:
    # Check system status every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:

jobs:
  system-health:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install health check dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv psutil
    
    - name: Check external service connectivity
      run: |
        python -c "
        import requests
        import sys
        
        print('🔍 Checking external service connectivity...')
        
        services = {
            'OpenAI API': 'https://api.openai.com/v1/models',
            'Qdrant Health': '${{ secrets.QDRANT_URL }}/health' if '${{ secrets.QDRANT_URL }}' else None
        }
        
        failed_services = []
        
        for name, url in services.items():
            if url is None or url.startswith('$'):
                print(f'   ⏭️  {name}: Skipped (no URL configured)')
                continue
                
            try:
                headers = {}
                if 'openai' in url:
                    headers['Authorization'] = 'Bearer ${{ secrets.OPENAI_API_KEY }}'
                elif 'qdrant' in url and '${{ secrets.QDRANT_API_KEY }}':
                    headers['api-key'] = '${{ secrets.QDRANT_API_KEY }}'
                
                response = requests.get(url, headers=headers, timeout=10)
                if response.status_code == 200:
                    print(f'   ✅ {name}: OK ({response.status_code})')
                else:
                    print(f'   ⚠️  {name}: Warning ({response.status_code})')
                    failed_services.append(name)
            except Exception as e:
                print(f'   ❌ {name}: Failed - {e}')
                failed_services.append(name)
        
        if failed_services:
            print(f'\\n❌ Failed services: {failed_services}')
            sys.exit(1)
        else:
            print('\\n✅ All services healthy')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
        QDRANT_URL: ${{ secrets.QDRANT_URL }}
    
    - name: Check repository health
      run: |
        echo "📊 Checking repository health metrics..."
        
        # Check for critical files
        echo "📁 Checking critical files..."
        critical_files=(
          "requirements.txt"
          "Dockerfile"
          "src/main.py"
          "src/retrieval_graph/graph.py"
          "src/index_graph/graph.py"
        )
        
        missing_files=()
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "   ✅ $file: Found"
          else
            echo "   ❌ $file: Missing"
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "❌ Missing critical files: ${missing_files[*]}"
          exit 1
        fi
        
        # Check code quality metrics
        echo "📈 Checking code quality metrics..."
        
        # Count Python files
        py_files=$(find src/ -name "*.py" | wc -l)
        echo "   📄 Python files: $py_files"
        
        # Count test files
        test_files=$(find tests/ -name "*.py" | wc -l)
        echo "   🧪 Test files: $test_files"
        
        # Check if we have adequate test coverage
        if [ $test_files -lt 3 ]; then
          echo "   ⚠️  Warning: Low test file count ($test_files)"
        else
          echo "   ✅ Adequate test coverage"
        fi
    
    - name: Performance baseline check
      run: |
        echo "⚡ Running performance baseline check..."
        
        python -c "
        import time
        import sys
        
        print('🔄 Running basic performance test...')
        
        # Simulate basic operations
        start_time = time.time()
        
        # Test import performance
        try:
            import src.retrieval_graph.graph
            import src.index_graph.graph
            print('   ✅ Module imports: OK')
        except ImportError as e:
            print(f'   ❌ Module imports: Failed - {e}')
            sys.exit(1)
        
        end_time = time.time()
        import_time = end_time - start_time
        
        print(f'   ⏱️  Import time: {import_time:.3f}s')
        
        # Check if import time is reasonable
        if import_time > 5.0:
            print(f'   ⚠️  Warning: Slow import time ({import_time:.3f}s)')
        else:
            print('   ✅ Import performance: Good')
        "
    
    - name: Security baseline check
      run: |
        echo "🔒 Running security baseline check..."
        
        # Check for common security issues
        echo "🔍 Checking for potential security issues..."
        
        # Check for hardcoded secrets
        echo "   🔑 Checking for hardcoded secrets..."
        if grep -r "sk-[a-zA-Z0-9]" src/ || \
           grep -r "password.*=" src/ | grep -v "os.environ" | grep -v "#"; then
          echo "   ❌ Found potential hardcoded secrets!"
          exit 1
        else
          echo "   ✅ No hardcoded secrets detected"
        fi
        
        # Check for eval/exec usage
        echo "   ⚠️  Checking for dangerous functions..."
        if grep -r "eval(" src/ || grep -r "exec(" src/; then
          echo "   ⚠️  Warning: Found eval/exec usage"
        else
          echo "   ✅ No dangerous function usage detected"
        fi
        
        # Check file permissions
        echo "   📁 Checking file permissions..."
        if find . -name "*.py" -perm 777 | grep -q .; then
          echo "   ⚠️  Warning: Found files with 777 permissions"
        else
          echo "   ✅ File permissions look good"
        fi
    
    - name: Generate status report
      run: |
        echo "📊 Generating system status report..."
        
        cat > system_status.md << EOF
        # System Status Report
        
        **Generated**: $(date)
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        
        ## Health Check Summary
        
        - ✅ External service connectivity: Passed
        - ✅ Repository health: Passed  
        - ✅ Performance baseline: Passed
        - ✅ Security baseline: Passed
        
        ## Metrics
        
        - Python files: $(find src/ -name "*.py" | wc -l)
        - Test files: $(find tests/ -name "*.py" | wc -l)
        - Last update: $(git log -1 --format="%cr")
        
        ## Next Actions
        
        - Continue monitoring system health
        - Review performance trends
        - Update security policies as needed
        
        EOF
        
        echo "✅ Status report generated"
    
    - name: Upload status report
      uses: actions/upload-artifact@v3
      with:
        name: system-status-report
        path: system_status.md
    
    - name: Alert on failures
      if: failure()
      run: |
        echo "🚨 SYSTEM HEALTH CHECK FAILED"
        echo "Timestamp: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        
        # In a real scenario, you would send alerts to:
        # - Slack/Discord
        # - Email
        # - PagerDuty
        # - Monitoring systems
        
        echo "📧 Alert notifications would be sent here"

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check dependency status
      run: |
        echo "📦 Checking dependency status..."
        
        # Install pip-audit for security scanning
        pip install pip-audit
        
        # Check for known vulnerabilities
        echo "🔍 Scanning for known vulnerabilities..."
        if pip-audit --requirement requirements.txt --format=json --output=vulnerabilities.json; then
          echo "✅ No known vulnerabilities found"
        else
          echo "⚠️ Vulnerabilities detected - check vulnerabilities.json"
        fi
        
        # Check for outdated packages
        echo "📅 Checking for outdated packages..."
        pip install -r requirements.txt
        pip list --outdated --format=json > outdated.json
        
        outdated_count=$(cat outdated.json | python -c "import sys, json; print(len(json.load(sys.stdin)))")
        echo "Outdated packages: $outdated_count"
        
        if [ $outdated_count -gt 10 ]; then
          echo "⚠️ Many outdated packages detected ($outdated_count)"
        else
          echo "✅ Dependency freshness: Good"
        fi
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-reports
        path: |
          vulnerabilities.json
          outdated.json 